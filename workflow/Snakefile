from snakemake.utils import validate
import pandas as pd
from pathlib import Path

container: "docker://continuumio/miniconda3:4.4.10"

configfile: "config/config.yaml"

##### complete species resource paths if following files defined with them #####
for config_resource in config.keys():
    # excluding non-path configs
    if config_resource not in ['viral_species']:
        config[config_resource] = config[config_resource].format(viral_species=config['viral_species'])
        config[config_resource] = str(Path(config[config_resource]).resolve())

##### load sample sheets #####
sample_table = pd.read_csv(config["sample_table"], sep="\t").set_index("id", drop=False)
sample_table.index.names = ["id"]

IDS = sorted(sample_table['id'].drop_duplicates().values)

def get_fastq(wildcards):
    """Get fastq files of given sample-unit."""
    fastqs = sample_table.loc[wildcards.id, ["r1", "r2"]].dropna()
    return {"r1": fastqs.r1, "r2": fastqs.r2}


rule all:
 input:
  quast_results = expand(["results/{id}/{id}_quast_results"], id=IDS)

rule indexing:
 message: "Indexing the human reference genome"
 conda: "envs/read_processing.yaml"
 #container: "docker://quay.io/biocontainers/bwa:0.7.17--h5bf99c6_8"
 input:
  human_ref_genome = config['human_reference_genome']
 output:
    multiext(config['human_reference_genome'], ".amb", ".ann", ".bwt", ".pac", ".sa"),
 shell:
  "bwa index {input}"
  
rule map_to_human_genome:
 message: "Mapping reads to the human genome to remove human contaminants"
 conda: "envs/read_processing.yaml"
 #container: "docker://quay.io/biocontainers/bwa:0.7.17--h5bf99c6_8"
 input:
  unpack(get_fastq),
  idx=rules.indexing.output,
 output:
  mapped_bam = "results/{id}/{id}.sam"
 params:
  index=lambda w, input: os.path.splitext(input.idx[0])[0]
 threads: 4
 shell:
  "bwa mem -t {threads} {params.index} {input.r1} {input.r2} > {output}"

rule extract_unmapped_reads:
 message: "Extracting unmapped reads from bam file"
 conda: "envs/read_processing.yaml"
 #container: "docker://quay.io/biocontainers/samtools:1.12--h9aed4be_1"
 input:
  mapped_reads = rules.map_to_human_genome.output.mapped_bam
 output:
  unmapped_bam = "results/{id}/{id}.bam"
 shell:
  "samtools view -b -f12 {input} > {output}"
  
rule bamtoFastq:
 message: "Converting BAM file into fastq files of forward and reverse reads"
 conda: "envs/read_processing.yaml"
 #container: "docker://quay.io/biocontainers/samtools:1.12--h9aed4be_1"
 input:
  unmapped_bam_file = rules.extract_unmapped_reads.output.unmapped_bam
 output:
  forward_read = "results/{id}/{id}_1.fastq",
  reverse_read = "results/{id}/{id}_2.fastq"
 shell:
  "samtools fastq -N -1 {output[0]} -2 {output[1]} {input}"

rule assembly:
 message: "Assembly of forward and reverse reads"
 conda: "envs/iva.yaml"
 #container: "docker://quay.io/biocontainers/iva:1.0.11--py_0"
 input:
  forward_read = rules.bamtoFastq.output.forward_read,
  reverse_read = rules.bamtoFastq.output.reverse_read
 output:
  contigs = "results/{id}/{id}_iva/contigs.fasta"
 threads: 8
 shell:
  "iva --reads_fwd {input.forward_read} --reads_rev {input.reverse_read} --threads {threads} {output}"

rule shiver_init:
 message: "Shiver initialization"
 conda: "envs/shiver.yaml"
 #container: "docker://quay.io/biocontainers/shiver:1.3.5--py27_0"
 input:
  reference_alignment = config['viral_reference_genome'],
  adapters = config['viral_sequencing_adapters'],
  primers = config['viral_sequencing_primers'],
  shiver_config = config['shiver_config_file']
 output:
  initialization_directory = directory("results/{id}/shiver/{id}_shiver_init_dir")
 params:
  shiver_init_dir_path = "{id}_shiver_init_dir"
 shell:
   """
   cd results/{wildcards.id}/shiver
   shiver_init.sh {params.shiver_init_dir_path} {input.shiver_config} {input.reference_alignment} {input.adapters} {input.primers}
   cd ../../../
   """


rule align_contigs:
 message: "Aligning contigs"
 conda: "envs/shiver.yaml"
 #container: "docker://quay.io/biocontainers/shiver:1.3.5--py27_0"
 input:
  initialization_directory = rules.shiver_init.output.initialization_directory,
  contigs_file = rules.assembly.output.contigs,
  shiver_config = config['shiver_config_file']
 output:
  blast_hits = "results/{id}/shiver/{id}.blast",
  aligned_contigs_raw = "results/{id}/shiver/{id}_raw_wRefs.fasta",
  aligned_contigs_cut = "results/{id}/shiver/{id}_cut_wRefs.fasta"
 shell:
  """
  cd results/{wildcards.id}/shiver
  shiver_align_contigs.sh {input.initialization_directory} {input.shiver_config} ../../../{input.contigs_file} {wildcards.id}
  cd ../../..
  """

rule map:
 message: "Mapping paired-end reads to reference genome"
 conda: "envs/shiver.yaml"
 #container: "docker://quay.io/biocontainers/shiver:1.3.5--py27_0"
 input:
  initialization_directory = rules.shiver_init.output.initialization_directory,
  contigs = rules.assembly.output.contigs,
  blast_hits = rules.align_contigs.output.blast_hits,
  aligned_contigs_cut = rules.align_contigs.output.aligned_contigs_cut,
  forward_read = rules.bamtoFastq.output.forward_read,
  reverse_read = rules.bamtoFastq.output.reverse_read,
  shiver_config = config['shiver_config_file']
 output:
  ref_seqs = "results/{id}/shiver/{id}_ref.fasta",
  base_freqs = "results/{id}/shiver/{id}_BaseFreqs.csv",
  base_freqs_global_aln = "results/{id}/shiver/{id}_BaseFreqs_ForGlobalAln.csv",
  coords = "results/{id}/shiver/{id}_coords.csv",
  insert_size_dist = "results/{id}/shiver/{id}_InsertSizeCounts.csv",
  consensus_genome = "results/{id}/shiver/{id}_remap_consensus_MinCov_10_30.fasta"
 shell:
    """
    cd results/{wildcards.id}/shiver
    shiver_map_reads.sh {input.initialization_directory} {input.shiver_config} ../../../{input.contigs} {wildcards.id} ../../../{input.blast_hits} ../../../{input.aligned_contigs_cut} ../../../{input.forward_read} ../../../{input.reverse_read}
    cd ../../..
    """

rule assembly_assessment:
  message: "Evaluate the quality of genome assembly"
  conda: "envs/qc.yaml"
  #container: "docker://quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4"
  input:
   consensus_genome = "results/{id}/shiver/{id}_remap_consensus_MinCov_10_30.fasta",
   quast_ref_genome = config['viral_reference_genome'],
   gene_features = config['viral_reference_gene_features']
  output:
   quast_results = directory("results/{id}/{id}_quast_results")
  shell:
   "python quast.py -r {input[1]} -g {input[2]} -o {output.quast_results} {input[0]}"
